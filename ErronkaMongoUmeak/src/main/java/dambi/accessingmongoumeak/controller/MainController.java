package dambi.accessingmongoumeak.controller;

import java.util.Date;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import dambi.accessingmongoumeak.model.Langilea;
import dambi.accessingmongoumeak.model.LangileaRepository;
import dambi.accessingmongoumeak.model.Partida;
import dambi.accessingmongoumeak.model.PartidaRepository;

@RestController // This means that this class is a Controller baina @Controller bakarrik
				// jarrita, PUT eta DELETEak ez dabiz
@RequestMapping(path = "/partidak") // This means URL's start with /demo (after Application path)
public class MainController {
	@Autowired // This means to get the bean called umeaRepository
				// Which is auto-generated by Spring, we will use it to handle the data
	private PartidaRepository partidarepository;

	@GetMapping(path = "/allPartida")
	public @ResponseBody Iterable<Partida> getAllPartidak() {
		// This returns a JSON or XML with the partidak
		return partidarepository.findAll();
	}

	@GetMapping(path = "/partida/{id}")
	public @ResponseBody Partida getPartidaFromId(@PathVariable int id) {
		// This returns a JSON or XML with the partida of that Id
		return partidarepository.findById(id);
	}

	@GetMapping(path = "/puntuacion/{puntuazioa}")
	public @ResponseBody Iterable<Partida> getPartidaFromPuntuazioa(@PathVariable int puntuazioa) {
		// This returns a JSON or XML with the partida with a score greater than the
		// given
		return partidarepository.findByPuntuazioa(puntuazioa);
	}

	@GetMapping(path = "/izena/{erabiltzailea}")
	public @ResponseBody Iterable<Partida> getPartidaFromErabiltzaileIzena(@PathVariable String erabiltzailea) {
		// This returns a JSON or XML with the partida of the langilea with that name
		return partidarepository.findByErabiltzaileIzena(erabiltzailea);
	}

	@GetMapping(path = "/Email/{email}")
	public @ResponseBody Iterable<Partida> getPartidaFromEmail(@PathVariable String email) {
		// This returns a JSON or XML with the partida of the langilea with that email
		return partidarepository.findByEmail(email);
	}

	@GetMapping(path = "/taldeaZenbakia/{taldea}")
	public @ResponseBody Iterable<Partida> getPartidaFromTaldea(@PathVariable int taldea) {
		// This returns a JSON or XML with the partida of the taldea
		return partidarepository.findByTaldea(taldea);
	}

	@GetMapping(path = "/{jokoIzena}")
	public @ResponseBody Iterable<Partida> getPartidaFromJokuIzena(@PathVariable String jokoIzena) {
		// This returns a JSON or XML with the partidas of the jokua with the jokua name
		return partidarepository.findByJokoIzena(jokoIzena);
	}

	@Autowired
	private PartidaRepository partidaRepository;

	@Autowired
	private LangileaRepository langileaRepository;

	@DeleteMapping(path = "/delete/{_id}")
	public @ResponseBody long deletePartida(@PathVariable int _id) {
		try {
			long zenbat = partidaRepository.delete(_id);
			return zenbat;
		} catch (Exception ex) {
			System.out.println("Errorea " + _id + " partida ezabatzerakoan.");
		}
		return _id;
	}

	@PostMapping(value = "/partida")
	public Partida savePartida(@Valid int id, int puntuazioa, String jokoIzena, String Izena) {
		try {
			Partida partida = new Partida();
			partida.setId(id);
			partida.setPuntuazioa(puntuazioa);
			partida.setData(new Date());
			partida.setJokoIzena(jokoIzena);

			Langilea langilea = langileaRepository.findByIzena(Izena);
			partida.setLangilea(langilea);

			partidaRepository.save(partida);
			return partida;
		} catch (Exception ex) {
			return null;
		}
	}

	@PutMapping(value = "/editPartida")
	public Partida editPartida(@Valid int id, int puntuazioa) {
		try {
			Partida partida = new Partida();
			partida = partidaRepository.findById(id);
			partida.setPuntuazioa(puntuazioa);

			partidaRepository.update(partida);
			return partida;
		} catch (Exception ex) {
			return null;
		}

	}

}